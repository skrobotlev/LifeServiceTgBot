const lasoBrowserService = require('../services/lasoBrowserService');

function formatTransactions(transactions) {
    if (!transactions || transactions.length === 0) return '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞';
    
    return transactions.map(t => 
        `üìÖ ${t.date}\nüí¨ ${t.description}\n${t.status ? `‚úÖ ${t.status}\n` : ''}üí∞ ${t.amount}`
    ).join('\n\n');
}

async function handleMessage(msg, bot) {
    const chatId = msg.chat.id;
    const text = msg.text;

    try {
        switch (text) {
            case '/start':
                await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
                    '/auth - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n' +
                    '/balance - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã\n' +
                    '/applepay - –ø—Ä–∏–≤—è–∑–∞—Ç—å Apple Pay\n' +
                    '/googlepay - –ø—Ä–∏–≤—è–∑–∞—Ç—å Google Pay');
                break;

            case '/auth':
                await bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
                
                try {
                    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ .env –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const privateKey = process.env.METAMASK_PRIVATE_KEY;
                    const result = await lasoBrowserService.init(privateKey);
                    await bot.sendMessage(chatId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                }
                break;

            case '/balance':
                await bot.sendMessage(chatId, '–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...');
                
                try {
                    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ .env –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const privateKey = process.env.METAMASK_PRIVATE_KEY;
                    const data = await lasoBrowserService.getBalance(privateKey);
                    
                    const message = `üí≥ –ö–∞—Ä—Ç–∞ Laso Finance\n` +
                        `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã: *${data.lastFour}*\n` +
                        `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *${data.expiry}*\n` +
                        `–°—Ç–∞—Ç—É—Å: *${data.status}*\n` +
                        `–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: *${data.createdAt}*\n` +
                        `–ë–∞–ª–∞–Ω—Å: *$${data.balance}*\n\n` +
                        `–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:\n` +
                        `${data.paymentMethods ? data.paymentMethods.join(', ') : '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã'}`;
                    
                    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /auth');
                }
                break;

            case '/applepay':
                await bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏ Apple Pay...\n' +
                    '–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:\n' +
                    '1. –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n' +
                    '2. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Apple Pay\n' +
                    '3. –°–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã\n' +
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
                
                try {
                    const privateKey = process.env.METAMASK_PRIVATE_KEY;
                    await lasoBrowserService.setupPaymentMethod(privateKey, 'apple');
                    await bot.sendMessage(chatId, 'Apple Pay —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ!');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Apple Pay:', error);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Apple Pay. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                break;

            case '/googlepay':
                await bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏ Google Pay...\n' +
                    '–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:\n' +
                    '1. –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n' +
                    '2. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Google Pay\n' +
                    '3. –°–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã\n' +
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
                
                try {
                    const privateKey = process.env.METAMASK_PRIVATE_KEY;
                    await lasoBrowserService.setupPaymentMethod(privateKey, 'google');
                    await bot.sendMessage(chatId, 'Google Pay —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ!');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Google Pay:', error);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Google Pay. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                break;

            default:
                await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = handleMessage; 