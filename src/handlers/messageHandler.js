const lasoBrowserService = require('../services/lasoBrowserService');
const referralService = require('../services/referralService');
const { privetstvie } = require('../texts');
const { db } = require('../config/firebaseConfig');
const { doc, getDoc, collection, getDocs } = require('firebase/firestore');

const ADMIN_ID = 197115775; // –í–∞—à ID –≤ Telegram

function formatTransactions(transactions) {
    if (!transactions || transactions.length === 0) return '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞';

    return transactions.map(t =>
        `üìÖ ${t.date}\nüí¨ ${t.description}\n${t.status ? `‚úÖ ${t.status}\n` : ''}üí∞ ${t.amount}`
    ).join('\n\n');
}

function createTypeSelectionKeyboard(isAdmin) {
    const keyboard = [
        [{ text: "–ü–æ–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–∞—Ä—Ç—ã", callback_data: "type_popolnyaemye" }],
        [{ text: "–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data: "type_ne_popolnyaemye" }],
        [{ text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data: "contact_manager" }]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (isAdmin) {
        keyboard.push([{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "show_stats" }]);
    }

    return {
        reply_markup: JSON.stringify({
            inline_keyboard: keyboard
        })
    };
}

async function getReferralStats() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals
        const referralsRef = collection(db, 'referrals');
        const snapshot = await getDocs(referralsRef);

        let statsMessage = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º*\n\n';
        let totalUsers = 0;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ
        const referrals = [];
        snapshot.forEach(doc => {
            const data = doc.data();
            const users = Object.entries(data)
                .filter(([key]) => key.startsWith('user_'))
                .map(([_, userData]) => userData);

            if (users.length > 0) {
                referrals.push({
                    id: doc.id,
                    users: users
                });
                totalUsers += users.length;
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        referrals.sort((a, b) => b.users.length - a.users.length);

        statsMessage += `*–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* ${referrals.length}\n`;
        statsMessage += `*–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* ${totalUsers}\n\n`;

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É
        for (const referral of referrals) {
            statsMessage += `üî∏ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* ${referral.id}\n`;
            statsMessage += `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* ${referral.users.length}\n\n`;
            statsMessage += '*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n';

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–≤—ã–µ)
            const sortedUsers = [...referral.users].sort((a, b) => {
                return b.timestamp.seconds - a.timestamp.seconds;
            });

            sortedUsers.forEach(user => {
                const username = user.username ? `@${user.username}` : '–±–µ–∑ username';
                const name = user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                const date = user.timestamp ? new Date(user.timestamp.seconds * 1000).toLocaleString() : '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                statsMessage += `- ${name} (${username}) - ${date}\n`;
            });
            statsMessage += '\n';
        }

        return statsMessage;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        console.error('Stack trace:', error.stack);
        return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
    }
}

async function handleMessage(msg, bot) {
    console.log('=== –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===');
    console.log('Chat ID:', msg.chat.id);
    console.log('Text:', msg.text);
    console.log('From:', msg.from.username);
    console.log('====================');

    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const isAdmin = userId === ADMIN_ID;

    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
        if (text === '/stats') {
            if (isAdmin) {
                const statsMessage = await getReferralStats();
                await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
                return;
            } else {
                await bot.sendMessage(chatId, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        if (text.startsWith('/start')) {
            let refCode = null;
            console.log('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ===');
            console.log('–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);

            if (text.includes('?start=')) {
                refCode = text.split('?start=')[1];
                console.log('–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥ –∏–∑ ?start=:', refCode);
            } else if (text.includes(' ')) {
                refCode = text.split(' ')[1];
                console.log('–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞:', refCode);
            }

            console.log('–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:', refCode);
            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from);

            if (refCode) {
                console.log('–ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª...');
                const saved = await referralService.saveReferral(refCode, msg.from);
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', saved);

                if (saved) {
                    const userInfo = `${msg.from.first_name || ""} ${msg.from.last_name || ""} (@${msg.from.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"})`;
                    await bot.sendMessage(
                        ADMIN_ID,
                        `üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${refCode}\nüë§ ${userInfo}\nüÜî ChatID: ${chatId}`
                    );
                    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                } else {
                    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
                }
            } else {
                console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏');
            }

            await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard(isAdmin));
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        switch (text) {
            case '/start':
                await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard(isAdmin));
                break;
            default:
                await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        console.error('Stack trace:', error.stack);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handleMessage,
    getReferralStats
}; 