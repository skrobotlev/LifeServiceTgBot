const lasoBrowserService = require('../services/lasoBrowserService');
const referralService = require('../services/referralService');
const { privetstvie } = require('../texts');
const { db } = require('../config/firebaseConfig');
const { doc, getDoc, collection, getDocs } = require('firebase/firestore');
const { PARTNERS, ADMIN_ID } = require('../config/partners');

function formatTransactions(transactions) {
    if (!transactions || transactions.length === 0) return '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞';

    return transactions.map(t =>
        `üìÖ ${t.date}\nüí¨ ${t.description}\n${t.status ? `‚úÖ ${t.status}\n` : ''}üí∞ ${t.amount}`
    ).join('\n\n');
}

function createTypeSelectionKeyboard(isAdmin) {
    const keyboard = [
        [{ text: "–ü–æ–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–∞—Ä—Ç—ã", callback_data: "type_popolnyaemye" }],
        [{ text: "–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data: "type_ne_popolnyaemye" }],
        [{ text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data: "contact_manager" }]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (isAdmin) {
        keyboard.push([{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "show_stats" }]);
    }

    return {
        reply_markup: JSON.stringify({
            inline_keyboard: keyboard
        })
    };
}

async function getReferralStats(username) {
    try {
        let statsMessage = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userRefs = PARTNERS[username] || [];
        const isAdmin = username === 'usr149049'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫
        if (!isAdmin && userRefs.length === 0) {
            return '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ';
        }

        let totalUsers = 0;
        const processedRefs = [];

        // –î–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for (const refId of isAdmin ? ['lvmnaboutAi'] : userRefs) {
            const refDoc = await getDoc(doc(db, 'referrals', refId));

            if (refDoc.exists()) {
                const data = refDoc.data();
                const users = [];

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
                for (const key in data) {
                    if (key.startsWith('user_')) {
                        users.push(data[key]);
                    }
                }

                if (users.length > 0) {
                    processedRefs.push({
                        id: refId,
                        users: users
                    });
                    totalUsers += users.length;
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        if (processedRefs.length === 0) {
            return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö.';
        }

        statsMessage += `*–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* ${totalUsers}\n\n`;

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        for (const ref of processedRefs) {
            statsMessage += `üî∏ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* ${ref.id}\n`;
            statsMessage += `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* ${ref.users.length}\n\n`;
            statsMessage += '*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n';

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            const sortedUsers = [...ref.users].sort((a, b) =>
                b.timestamp.seconds - a.timestamp.seconds
            );

            sortedUsers.forEach(user => {
                const username = user.username ? `@${user.username}` : '–±–µ–∑ username';
                const name = user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                const date = user.timestamp ? new Date(user.timestamp.seconds * 1000).toLocaleString() : '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                statsMessage += `- ${name} (${username}) - ${date}\n`;
            });
            statsMessage += '\n';
        }

        return statsMessage;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        console.error('Stack trace:', error.stack);
        return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
    }
}

async function handleMessage(msg, bot) {
    console.log('=== –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===');
    console.log('Chat ID:', msg.chat.id);
    console.log('Text:', msg.text);
    console.log('From:', msg.from.username);
    console.log('====================');

    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const username = msg.from.username;
    const isAdmin = userId === ADMIN_ID;

    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
        if (text === '/stats') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è username
            if (!username) {
                await bot.sendMessage(chatId, '‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ Telegram');
                return;
            }

            const statsMessage = await getReferralStats(username);
            await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        if (text.startsWith('/start')) {
            let refCode = null;
            console.log('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ===');
            console.log('–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);

            if (text.includes('?start=')) {
                refCode = text.split('?start=')[1];
                console.log('–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥ –∏–∑ ?start=:', refCode);
            } else if (text.includes(' ')) {
                refCode = text.split(' ')[1];
                console.log('–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞:', refCode);
            }

            console.log('–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:', refCode);
            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from);

            if (refCode) {
                console.log('–ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª...');
                const saved = await referralService.saveReferral(refCode, msg.from);
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', saved);

                if (saved) {
                    const userInfo = `${msg.from.first_name || ""} ${msg.from.last_name || ""} (@${msg.from.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"})`;
                    await bot.sendMessage(
                        ADMIN_ID,
                        `üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${refCode}\nüë§ ${userInfo}\nüÜî ChatID: ${chatId}`
                    );
                    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                } else {
                    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
                }
            } else {
                console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏');
            }

            await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard(isAdmin));
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        switch (text) {
            case '/start':
                await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard(isAdmin));
                break;
            default:
                await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        console.error('Stack trace:', error.stack);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handleMessage,
    getReferralStats
}; 