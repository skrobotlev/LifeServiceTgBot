const { db } = require('../config/firebaseConfig');
const { doc, getDoc } = require('firebase/firestore');
const { PARTNERS } = require('../config/partners');

async function getReferralStats(username) {
    try {
        let statsMessage = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userRefs = PARTNERS[username] || [];
        const isAdmin = username === 'usr149049'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫
        if (!isAdmin && userRefs.length === 0) {
            return '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ';
        }

        let totalUsers = 0;
        const processedRefs = [];

        // –î–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for (const refId of isAdmin ? ['lvmnaboutAi'] : userRefs) {
            const refDoc = await getDoc(doc(db, 'referrals', refId));

            if (!refDoc.exists()) {
                console.log(`–î–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π ${refId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                continue;
            }

            const data = refDoc.data();
            const users = [];

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
            for (const key in data) {
                if (key.startsWith('user_')) {
                    users.push(data[key]);
                }
            }

            if (users.length > 0) {
                processedRefs.push({
                    id: refId,
                    users: users
                });
                totalUsers += users.length;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        if (processedRefs.length === 0) {
            return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö.';
        }

        statsMessage += `*–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* ${totalUsers}\n\n`;

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        for (const ref of processedRefs) {
            statsMessage += `üî∏ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* ${ref.id}\n`;
            statsMessage += `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* ${ref.users.length}\n\n`;
            statsMessage += '*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n';

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            const sortedUsers = [...ref.users].sort((a, b) =>
                b.timestamp.seconds - a.timestamp.seconds
            );

            sortedUsers.forEach(user => {
                const username = user.username ? `@${user.username}` : '–±–µ–∑ username';
                const name = user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                const date = user.timestamp ? new Date(user.timestamp.seconds * 1000).toLocaleString() : '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                statsMessage += `- ${name} (${username}) - ${date}\n`;
            });
            statsMessage += '\n';
        }

        return statsMessage;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        console.error('Stack trace:', error.stack);
        return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
    }
}

module.exports = {
    getReferralStats
}; 