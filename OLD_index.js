const TelegramApi = require("node-telegram-bot-api");

const { privetstvie } = require("./texts");
const {
  descriptionReloadableLasoCard,
  descriptionNonReloadableLasoCard,
  bybitDecription,
} = require("./descriptions");

const token = "7623617111:AAF1X988ErWNSxMYJn1Z7z3PGqhrvNJLG7A";
const bot = new TelegramApi(token, { polling: true });

const MANAGER_CHAT_ID = 197115775;

const availableCards = [
  {
    name: "–ü–æ–ø–æ–ª–Ω—è–µ–º–∞—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è Visa",
    id: "card_reloadable",
    type: "popolnyaemye",
  },
  {
    name: "–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è Mastercard",
    id: "card_non_reloadable",
    type: "ne_popolnyaemye",
  },
  { name: "–ö–∞—Ä—Ç–∞ Bybit", id: "card_bybit", type: "popolnyaemye" },
];

function createTypeSelectionKeyboard() {
  return {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "–ü–æ–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–∞—Ä—Ç—ã", callback_data: "type_popolnyaemye" }],
        [{ text: "–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data: "type_ne_popolnyaemye" }],
        [{ text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data: "contact_manager" }],
      ],
    }),
  };
}

function createCardsByTypeKeyboard(cardType) {
  const filtered = availableCards.filter((card) => card.type === cardType);
  const inlineKeyboard = filtered.map((card) => [
    { text: card.name, callback_data: card.id },
  ]);
  inlineKeyboard.push([{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_type" }]);
  return { reply_markup: JSON.stringify({ inline_keyboard: inlineKeyboard }) };
}

function createBackButtonKeyboard() {
  return {
    reply_markup: JSON.stringify({
      inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]],
    }),
  };
}

function createBackAndContactKeyboard() {
  return {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          { text: "–ù–∞–∑–∞–¥", callback_data: "back_to_menu" },
          { text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data: "contact_manager" },
        ],
      ],
    }),
  };
}

const userStates = {};

bot.setMyCommands([
  { command: "/start", description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
  { command: "/info", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" },
  { command: "/contact", description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" },
]);

// === –û–ë–†–ê–ë–û–¢–ö–ê –° –†–ï–§–ï–†–ê–õ–¨–ù–´–ú –ö–û–î–û–ú ===
bot.onText(/\/start(?:\s(.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const refCode = match[1];

  if (refCode) {
    const userInfo = `${msg.from.first_name || ""} ${msg.from.last_name || ""} (@${msg.from.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"})`;
    await bot.sendMessage(
      MANAGER_CHAT_ID,
      `üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${refCode}\nüë§ ${userInfo}\nüÜî ChatID: ${chatId}`
    );
  }

  console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª /start, —á–∞—Ç ID:", chatId);
  await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard());
});

bot.on("message", async (msg) => {
  const text = msg.text;
  const chatId = msg.chat.id;

  if (text === "/contact") {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª /contact, —á–∞—Ç ID:", chatId);
    userStates[chatId] = { stage: "ask_username" };
    await bot.sendMessage(
      chatId,
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
      createBackButtonKeyboard()
    );
    return;
  }

  if (userStates[chatId]) {
    const state = userStates[chatId];
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç: "${text}", stage: ${state.stage}`
    );

    if (state.stage === "ask_username") {
      state.username = text;
      state.stage = "ask_email";
      await bot.sendMessage(
        chatId,
        "–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        createBackButtonKeyboard()
      );
      return;
    }
    if (state.stage === "ask_email") {
      state.email = text;
      state.stage = "ask_message";
      await bot.sendMessage(
        chatId,
        "–û—Ç–ª–∏—á–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
        createBackButtonKeyboard()
      );
      return;
    }
    if (state.stage === "ask_message") {
      state.message = text;
      const userInfo = `${msg.from.first_name || ""} ${msg.from.last_name || ""
        } (@${msg.from.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"})`;
      const info = `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:
–ù–∏–∫: ${state.username}
Email: ${state.email}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${state.message}
ChatID: ${chatId}
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${userInfo}`;
      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É:", info);
      await bot.sendMessage(MANAGER_CHAT_ID, info);
      await bot.sendMessage(
        chatId,
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        createTypeSelectionKeyboard()
      );
      delete userStates[chatId];
      return;
    }
  }
});

bot.on("callback_query", async (msg) => {
  const data = msg.data;
  const chatId = msg.message.chat.id;
  console.log(`callback_query –æ—Ç —á–∞—Ç–∞ ${chatId}, data = ${data}`);
  await bot.answerCallbackQuery(msg.id);

  if (data === "back_to_menu") {
    console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
    delete userStates[chatId];
    await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard());
    return;
  }
  if (data === "back_to_type") {
    console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞");
    await bot.sendMessage(chatId, privetstvie, createTypeSelectionKeyboard());
    return;
  }
  if (data === "contact_manager") {
    console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'");
    userStates[chatId] = { stage: "ask_username" };
    await bot.sendMessage(
      chatId,
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
      createBackButtonKeyboard()
    );
    return;
  }

  if (data === "type_popolnyaemye") {
    console.log("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–æ–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–∞—Ä—Ç—ã");
    await bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
      createCardsByTypeKeyboard("popolnyaemye")
    );
    return;
  }
  if (data === "type_ne_popolnyaemye") {
    console.log("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã");
    await bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
      createCardsByTypeKeyboard("ne_popolnyaemye")
    );
    return;
  }

  const selectedCard = availableCards.find((card) => card.id === data);
  if (!selectedCard) {
    console.log("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ id:", data);
    return;
  }
  console.log("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:", selectedCard.name, "—Å id:", selectedCard.id);
  if (selectedCard.id === "card_bybit") {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã Bybit");
    await bot.sendMessage(
      chatId,
      bybitDecription,
      createBackAndContactKeyboard()
    );
  }
  if (selectedCard.id === "card_reloadable") {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–π –∫–∞—Ä—Ç—ã");
    await bot.sendMessage(
      chatId,
      descriptionReloadableLasoCard,
      createBackAndContactKeyboard()
    );
  }
  if (selectedCard.id === "card_non_reloadable") {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –∫–∞—Ä—Ç—ã");
    await bot.sendMessage(
      chatId,
      descriptionNonReloadableLasoCard,
      createBackAndContactKeyboard()
    );
  }
})